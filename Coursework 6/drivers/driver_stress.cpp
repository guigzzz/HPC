#include "unif01.h"
#include "bbattery.h"
#include "swrite.h"

#include "workload.hpp"

#include <iostream>
#include <random>
#include <chrono>

double score(double n, double g, double t)
{
   double s=1.0;

   double r=g / t;
   if(r>1.0){
      s *= exp(-r);
   }

   return log(n)/log(2.0) * s;
}

double computeN(double t)
{
   double ns[] = {
     6210526, // 2
     26234782, // 3
     66479310, // 4
     99890909, // 5
     127500000, // 6
     127500000, // 7
     150000000, // 8
     171323529, // 9
     228769230, // 10
     255000000, // 11
     264000000, // 12
     266000000, // 13
     266000000, // 14
     280000000, // 15
     358900000, // 16
     375529411, // 17
     414714285, // 18
     454736842, // 19
     625000000, // 20
     670833333, // 21
     825000000, // 22
     850000000, // 23
     925000000, // 24
     925000000, // 25
     950000000, // 26
     1016666666, // 27
     1016666666, // 28
     1100000000, // 29
     1150000000, // 30
     1150000000, // 31
     1250000000, // 32
     1300000000, // 33
     1300000000, // 34
     1300000000, // 35
     1400000000, // 36
     1400000000, // 37
     1400000000, // 38
     1500000000, // 39
     1500000000, // 40
     1600000000, // 41
     1650000000, // 42
     1650000000, // 43
     1700000000, // 44
     1700000000, // 45
     1700000000, // 46
     1833333333, // 47
     1833333333, // 48
     1833333333, // 49
     1900000000, // 50
     2000000000, // 51
     2100000000, // 52
     2100000000, // 53
     2100000000, // 54
     2100000000, // 55
     2200000000, // 56
     2200000000, // 57
     2300000000, // 58
     2300000000, // 59
     2300000000, // 60
     2400000000, // 61
     2400000000, // 62
     2400000000, // 63
     2500000000, // 64
     2500000000, // 65
     2500000000, // 66
     2500000000, // 67
     2500000000, // 68
     2600000000, // 69
     2600000000, // 70
     2800000000, // 71
     2800000000, // 72
     2800000000, // 73
     3000000000, // 74
     3000000000, // 75
     3000000000, // 76
     3000000000, // 77
     3000000000, // 78
     3000000000, // 79
     3000000000, // 80
     3000000000, // 81
     3000000000, // 82
     3000000000, // 83
     3000000000, // 84
     3000000000, // 85
     3000000000, // 86
     3000000000, // 87
     3000000000, // 88
     3000000000, // 89
     3000000000, // 90
     3000000000, // 91
     4000000000, // 92
     4000000000, // 93
     4000000000, // 94
     4000000000, // 95
     4000000000, // 96
     4000000000, // 97
     4000000000, // 98
     4000000000, // 99
     4000000000, // 100
     4000000000, // 101
     4000000000, // 102
     4000000000, // 103
     4000000000, // 104
     4000000000, // 105
     4000000000, // 106
     4000000000, // 107
     4000000000, // 108
     4000000000, // 109
     4000000000, // 110
     4000000000, // 111
     4000000000, // 112
     4000000000, // 113
     4000000000, // 114
     7000000000, // 115
     8000000000, // 116
     8000000000, // 117
     8000000000, // 118
     8000000000, // 119
     8000000000, // 120
     8000000000, // 121
     8000000000, // 122
     8000000000, // 123
     8000000000, // 124
     8000000000, // 125
     8000000000, // 126
     8000000000, // 127
     8000000000, // 128
     8000000000, // 129
     8000000000, // 130
     8000000000, // 131
     8000000000, // 132
     8000000000, // 133
     8000000000, // 134
     8000000000, // 135
     8000000000, // 136
     8000000000, // 137
     8000000000, // 138
     8000000000, // 139
     9000000000, // 140
     10000000000, // 141
     10000000000, // 142
     10000000000, // 143
     10000000000, // 144
     10000000000, // 145
     10000000000, // 146
     10000000000, // 147
     10000000000, // 148
     10000000000, // 149
     10000000000, // 150
     10000000000, // 151
     10000000000, // 152
     10000000000, // 153
     10000000000, // 154
     10000000000, // 155
     10000000000, // 156
     10000000000, // 157
     10000000000, // 158
     10000000000, // 159
     10000000000, // 160
     10000000000, // 161
     10000000000, // 162
     10000000000, // 163
     10000000000, // 164
     10000000000, // 165
     10000000000, // 166
     10000000000, // 167
     10000000000, // 168
     10000000000, // 169
     10000000000, // 170
     10000000000, // 171
     10000000000, // 172
     10000000000, // 173
     10000000000, // 174
     10000000000, // 175
     10000000000, // 176
     10000000000, // 177
     10000000000, // 178
     10000000000, // 179
     10000000000  // 180
   };

   int idx;
   if (t < 2) {
      return t / 2 * ns[idx];
   }
   else if (2 <= t && t <= 180) {
      idx = ((int) t) - 2;
   }
   else {
      idx = 180 - 2;
   }
   return ns[idx];
}

int main (int argc, char *argv[])
{
   auto begin = std::chrono::system_clock::now();

   std::mt19937 rng(time(0));

   double t=2+rng()%28;
   if(argc > 1){
      t=strtod(argv[1], 0);
   }

   // Turn off all printing to stdout from TestU01
   // You may want to try flipping this to 1 to see what it is actually doing.
   swrite_Basic=0;

   unif01_Gen *gen=workload_Create();
   std::string name=workload_Name(gen);

   double n = computeN(t);

   // Make sure this happens _before_ starting the battery, so that the
   // client knows what you are trying.
   fprintf(stdout, "%s, -1, TimeBudget, 0, %g\n", name.c_str(), t);
   fprintf(stdout, "%s, -1, ChosenN, 0, %g\n", name.c_str(), n);
   fflush(stdout);

   // The slow part
   auto results=bbattery_RabbitPar(gen, n);

   for(auto & r : results){
     fprintf(stdout, "%s, %d, %s, %d, %.16g\n", name.c_str(), r.TestIndex, r.TestName.c_str(), r.SubIndex, r.pVal);
   }

   auto end = std::chrono::system_clock::now();
   std::chrono::duration<double> span=end-begin;
   double g=span.count();

   fprintf(stdout, "%s, -1, TimeUsed, 0, %.16g\n", name.c_str(), g);
   fprintf(stdout, "%s, -1, Score, 0, %.16g\n", name.c_str(), score(n, g, t));

   workload_Destroy(gen);
   return 0;
}
