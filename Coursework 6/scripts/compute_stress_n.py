#!/usr/bin/env python
times = [0.150846, 0.153434, 0.160077, 0.161247, 0.162186, 0.165218, 0.168357, 0.169718, 0.206782, 0.234313, 0.248470, 0.271021, 0.297019, 0.333981, 0.337786, 0.346735, 0.413282, 0.433743, 0.440565, 0.446916, 0.505206, 0.531028, 0.565145, 0.570101, 0.595275, 0.641164, 0.664894, 0.692619, 0.764985, 0.772561, 0.782476, 0.798880, 0.809637, 0.845156, 0.877739, 0.899309, 0.946374, 0.970384, 0.971542, 0.982618, 1.081630, 1.098247, 1.121324, 1.136794, 1.159410, 1.216875, 1.240716, 1.247787, 1.262588, 1.306023, 1.329987, 1.339062, 1.340173, 1.340755, 1.376380, 1.453108, 1.480039, 1.492740, 1.505339, 1.526589, 1.532976, 1.537733, 1.539659, 1.588776, 1.602504, 1.616106, 1.620639, 1.634271, 1.683313, 1.703317, 1.706976, 1.718113, 1.731225, 1.761901, 1.784986, 1.828614, 1.848510, 1.863790, 1.865354, 1.908408, 1.911461, 1.916885, 1.919085, 1.967777, 1.973143, 2.016395, 2.075933, 2.084557, 2.091811, 2.093706, 2.114757, 2.116008, 2.126535, 2.144134, 2.172777, 2.196741, 2.326920, 2.330512, 2.332782, 2.359658, 2.368431, 2.374960, 2.378659, 2.412942, 2.457773, 2.506185, 2.530765, 2.563055, 2.569349, 2.591571, 2.610457, 2.614123, 2.626467, 2.638721, 2.665710, 2.687945, 2.729482, 2.804823, 2.822991, 2.847462, 2.870655, 2.870917, 2.879753, 2.880521, 2.885046, 2.906727, 2.946389, 2.949360, 2.967962, 2.989000, 3.013005, 3.019487, 3.041520, 3.047264, 3.061009, 3.080710, 3.088753, 3.120287, 3.120597, 3.163311, 3.166162, 3.186122, 3.203761, 3.218420, 3.244881, 3.257265, 3.260044, 3.293228, 3.316102, 3.316383, 3.322334, 3.341601, 3.346822, 3.369566, 3.378669, 3.398156, 3.528315, 3.583176, 3.607647, 3.664146, 3.737908, 3.752797, 3.774920, 3.821319, 3.829437, 3.850753, 3.861014, 3.862510, 3.891926, 3.905144, 3.918004, 3.921461, 3.983634 , 4.000600, 4.032338, 4.037446, 4.046442, 4.077228, 4.090567, 4.120724 , 4.136002 , 4.146616, 4.155927 , 4.162396 , 4.193599, 4.199149, 4.226762, 4.234304, 4.262312, 4.264344 , 4.276365, 4.280710, 4.304399, 4.329755, 4.371044, 4.404243 , 4.426333, 4.436453 , 4.454766 , 4.462543 , 4.464613 , 4.603658 , 4.649431 , 4.666258 , 4.668596 , 4.819757 , 7.062417 , 7.194431 , 7.262827 , 7.321200 , 7.324839 , 7.545362 , 7.616084 , 7.694910 , 7.734627 , 7.785680 , 7.856955 , 7.896137 , 7.950913 , 8.010900 , 8.067439 , 8.076066 , 8.504993 , 8.518637 , 8.668483 , 8.875091 , 8.909163 , 8.962568 , 9.208493 , 9.327713 , 9.464688 , 9.693689 , 10.229264, 14.596306, 14.815269, 15.120340, 15.316354, 15.386908, 15.510350, 15.566203, 15.616848, 15.634903, 15.652045, 15.685037, 15.770117, 15.816353, 15.878556, 15.981499, 15.993011, 16.313160, 16.723058, 17.018072, 17.315664, 17.508447, 18.261976, 19.005359, 20.096261, 21.005123, 22.555661, 23.503007 , 25.505749 , 28.034651 , 30.689513 , 32.292997 , 34.684790 , 37.267594 , 39.584233 , 40.438809 , 45.696157 , 50.456019 , 54.598038 , 58.964241 , 69.048471 , 89.637193 , 111.987271, 112.012853, 113.404874 ]
ns    = [200000  , 300000  , 800000  , 600000  , 500000  , 100000  , 400000  , 700000  , 900000  , 1200000  , 1000000, 1100000 , 1300000 , 1400000 , 1600000 , 1500000 , 1800000 , 1700000 , 1900000 , 2000000 , 2100000 , 2200000 , 2300000 , 2400000 , 2500000 , 2600000 , 2800000 , 2900000 , 3300000 , 3100000 , 3200000 , 3400000 , 3500000 , 3600000 , 2700000 , 3700000 , 3000000 , 3800000 , 4000000 , 4200000 , 4400000 , 4300000 , 4500000 , 4800000 , 4900000 , 4700000 , 4100000 , 3900000 , 5100000 , 5200000 , 5300000 , 5500000 , 5400000 , 5600000 , 5800000 , 5900000 , 4600000 , 6400000 , 6300000 , 5000000 , 6100000 , 5700000 , 6500000 , 6600000 , 6200000 , 6700000 , 10000000, 10100000, 6800000 , 6900000 , 11100000, 7300000 , 7000000 , 7200000 , 7100000 , 7400000 , 7500000 , 7600000 , 7900000 , 13100000, 8000000 , 6000000 , 12100000, 8100000 , 7700000 , 8300000 , 8200000 , 8700000 , 8400000 , 20100000, 7800000 , 8800000 , 8500000 , 8900000 , 9000000 , 8600000 , 14100000, 21100000, 9300000 , 22100000, 9500000 , 9400000 , 9200000 , 9700000 , 9800000 , 9900000 , 30100000, 16100000, 23100000, 15100000, 17100000, 32100000, 24100000, 40100000, 25100000, 31100000, 34100000, 42100000, 19100000, 33100000, 27100000, 41100000, 18100000, 35100000, 26100000, 44100000, 29100000, 45100000, 53100000, 52100000, 9100000, 50100000 , 36100000, 9600000 , 37100000, 43100000, 61100000, 48100000, 46100000, 47100000, 60100000, 28100000, 51100000, 54100000, 55100000, 38100000, 66100000, 58100000, 39100000, 56100000, 49100000, 64100000, 62100000, 65100000, 63100000, 57100000, 59100000, 67100000, 72100000, 77100000, 88100000, 84100000, 68100000, 82100000, 70100000, 90100000, 81100000, 86100000, 80100000, 71100000, 73100000, 83100000, 100000000, 93100000, 79100000, 96100000, 95100000, 74100000, 99100000, 105000000, 112500000, 76100000, 110000000, 100000000, 69100000, 94100000, 75100000, 78100000, 85100000, 100100000, 87100000, 89100000, 92100000, 97100000, 98100000, 102500000, 91100000, 122500000, 130000000, 107500000, 125000000, 132500000, 117500000, 120000000, 115000000, 127500000, 140000000, 150000000, 135000000, 137500000, 142500000, 145000000, 170000000, 165000000, 155000000, 160000000, 175000000, 147500000, 180000000, 185000000, 200000000, 195000000, 210000000, 190000000, 220000000, 230000000, 268000000, 264000000, 240000000, 250000000, 260000000, 262000000, 266000000, 280000000, 270000000, 269000000, 450000000, 340000000, 290000000, 310000000, 400000000, 330000000, 650000000, 350000000, 425000000, 300000000, 375000000, 525000000, 320000000, 500000000, 700000000, 550000000, 600000000, 475000000, 750000000, 800000000, 850000000, 900000000, 950000000, 1000000000, 1100000000, 1200000000, 1300000000, 1400000000, 1500000000, 1600000000, 1700000000, 1800000000, 2000000000, 2200000000, 2400000000, 2600000000, 3000000000, 4000000000, 6000000000, 8000000000, 10000000000]

t_min = 2
t_max = 180

# average ns from all times in the range [0.80*tgt_t, 0.98*tgt_t]
print("double ns[] = {")
for tgt_t in range(t_min, t_max+1):

    lower_limit = 0.80 * tgt_t
    upper_limit = 0.98 * tgt_t
    # biggest n such that t < upper_limit
    biggest_candidate = 0
    acc_n = []

    for idx, t in enumerate(times):
        if not t < upper_limit:
            break
        biggest_candidate = ns[idx]
        if lower_limit < t:
            acc_n.append(ns[idx])

    if len(acc_n) == 0:
        avg = biggest_candidate
    else:
        avg = float(sum(acc_n)) / len(acc_n)

    print("  %s%s // %s" % (int(avg), ' ' if tgt_t == t_max else ',', tgt_t))

print("};")

